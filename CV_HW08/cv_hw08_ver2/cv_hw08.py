#****************************************************************************
#  FileName     [ cv_hw08.py ]
#  Author       [ Lynn ]
#****************************************************************************
import os, argparse
import numpy as np
import cv2
import math, random

from PIL import Image

# (a) Generate noisy images with gaussian noise(amplitude of 10 and 30)
def gaussian_noise(img, width, height, amplitude):
	img_noise = img.copy()
	img_noise = img_noise[:, :, 0]

	gaussian = np.random.normal(0, (amplitude), (width, height))
	img_noise = img_noise + gaussian

	return img_noise

# (b) Generate noisy images with salt-and-pepper noise( probability 0.1 and 0.05)
def salt_and_pepper(img, width, height, probability):
	img_sp = img.copy()
	img_sp = img_sp[:, :, 0]

	for w in range(width):
		for h in range(height):
			rand = np.random.uniform(0,1)
			if (rand<probability):
				img_sp[w][h] = 0
			elif (rand>(1-probability)):
				img_sp[w][h] = 255
			else:
				img_sp[w][h] = img_sp[w][h]

	return img_sp

# (c) Use the 3x3, 5x5 box filter on images generated by (a)(b)
# def box_filter(img, width, height, boxwidth, boxheight):
# 	img_box = img.copy()

# 	ext = boxwidth//2
# 	img_bf = np.zeros((width+ext*2, height+ext*2), np.float64)
# 	img_bf[ext:width+ext, ext:height+ext] = img_box

# 	for w in range(ext, width+ext, 1):
# 		for h in range(ext, height+ext, 1):
# 			img_box[w-ext][h-ext] = np.mean(img_bf[w-ext:w+ext+1, h-ext:h+ext+1])

# 	return img_box

def box_filter(img, width, height, boxwidth, boxheight):
	img_copy = img.copy()
	img_bf = cv2.boxFilter(img_copy, -1, (boxwidth, boxheight))
	return img_bf

# (d) Use 3x3, 5x5 median filter on images generated by (a)(b)
# def median_filter(img, width, height, boxwidth, boxheight):
# 	img_copy = img.copy()
# 	img_med = np.zeros((width, height), np.float64)
# 	ext = boxwidth//2
# 	mf_len = (boxwidth * boxheight) - 1
# 	img_mf = np.zeros((width+ext*2, height+ext*2), np.float64)
# 	img_mf[ext:width+ext, ext:height+ext] = img_copy

# 	for w in range(ext, width+ext, 1):
# 		for h in range(ext, height+ext, 1):
# 			mf_mask = img_mf[w-ext:w+ext+1, h-ext:h+ext+1]
# 			mf_mask = np.sort(np.reshape(mf_mask, (1, mf_len+1)))
# 			if (mf_len%2!=0):
# 				img_med[w-ext][h-ext] = mf_mask[0][mf_len//2]
# 			else:
# 				img_med[w-ext][h-ext] = (mf_mask[0][mf_len//2] + mf_mask[0][mf_len//2+1]) / 2

# 	return img_med
	
def median_filter(img, width, height, boxwidth, boxheight):
	img_copy = img.copy()
	img_copy = np.float32(img_copy)
	img_med = cv2.medianBlur(img_copy, boxwidth)
	return img_med

# (e) Use both opening-then-closing and closing-then opening filter 
#	  (using the octogonal 3-5-5-5-3 kernel, value = 0) on images generated by (a)(b)
# Dilation mask
def Dilation_mask(thresh):
	width, height = thresh.shape
	thresh_ext_init = np.zeros((width+4, height+4), np.uint8)
	thresh_ext = np.zeros((width+4, height+4), np.uint8)
	thresh_done = np.zeros((width, height), np.uint8)

	thresh_ext_init[2:width+2, 2:height+2] = thresh[0:width, 0:height]

	for w in range(2, width+2, 1):
		for h in range(2, height+2, 1):
			max_pixel_v = np.amax(thresh_ext_init[w-2:w+3, h-1:h+2])
			max_pixel_h = np.amax(thresh_ext_init[w-1:w+2, h-2:h+3])
			max_pixel = max(0, max_pixel_v, max_pixel_h)

			# octogonal 3-5-5-5-3 kernel
			thresh_ext[w, h] = max_pixel

	thresh_done[0:width, 0:height] = thresh_ext[2:width+2, 2:height+2]
	return(thresh_done)

# Erosion mask
def Erosion_mask(thresh):
	width, height = thresh.shape
	thresh_ext_init = np.ones((width+4, height+4), np.uint8)
	thresh_ext_init = thresh_ext_init * 255
	thresh_ext = np.zeros((width+4, height+4), np.uint8)
	thresh_done = np.zeros((width, height), np.uint8)

	thresh_ext_init[2:width+2, 2:height+2] = thresh[0:width, 0:height]

	for w in range(2, width+2, 1):
		for h in range(2, height+2, 1):
			min_pixel_v = np.amin(thresh_ext_init[w-2:w+3, h-1:h+2])
			min_pixel_h = np.amin(thresh_ext_init[w-1:w+2, h-2:h+3])
			min_pixel = min(255, min_pixel_v, min_pixel_h)

			# octogonal 3-5-5-5-3 kernel
			thresh_ext[w, h] = min_pixel

	thresh_done[0:width, 0:height] = thresh_ext[2:width+2, 2:height+2]
	return(thresh_done)

# Opening
def Opening(thresh, oct_Kernel):
	# Erosion followed by Dilation
	# img_opening = Erosion_mask(thresh)
	# img_opening = Dilation_mask(img_opening)
	img_opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, oct_Kernel)
	return img_opening

# Closing
def Closing(thresh, oct_Kernel):
	# Dilation followed by Erosion
	# img_closing = Dilation_mask(thresh)
	# img_closing = Erosion_mask(img_closing)
	img_closing = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, oct_Kernel)
	return img_closing

def SNR(initImg, noiseImg, width, height):
	initImg = initImg.astype(float)
	initImg = cv2.normalize(initImg, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)
	noiseImg = noiseImg.astype(float)
	noiseImg = cv2.normalize(noiseImg, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)
	
	size = width * height
	u, vs = 0, 0
	un, vn = 0, 0
	snr = 0

	u = np.sum(initImg) / size

	for w in range(width):
		for h in range(height):
			vs += math.pow((initImg[w][h]-u), 2)
	vs /= size

	un = np.sum(noiseImg-initImg) / size

	for w in range(width):
		for h in range(height):
			vn += math.pow((noiseImg[w][h] - initImg[w][h] - un), 2)
	vn /= size

	snr = 20 * math.log(math.sqrt(vs)/math.sqrt(vn), 10)

	return snr


def main(Config):
	# Read in Image
	Img = cv2.imread(Config.init_pict)
	Width, Height, channel = Img.shape
	print("Image Width =", Width, ", Image Height =", Height, "\n")

	Img_copy = Img.copy()
	Img_copy = Img_copy[:, :, 0]

	# octogonal 3-5-5-5-3 kernel
	oct_Kernel = np.ones((5, 5), np.uint8)
	oct_Kernel[0, 0], oct_Kernel[0, 4], oct_Kernel[4, 0], oct_Kernel[4, 4] = 0, 0, 0, 0

	# (a) Generate noisy images with gaussian noise(amplitude of 10 and 30)
	gau10 = gaussian_noise(Img, Width, Height, 10)
	cv2.imwrite('gau10.bmp', gau10)
	gau30 = gaussian_noise(Img, Width, Height, 30)
	cv2.imwrite('gau30.bmp', gau30)
	print("Gaussian Noise on Lena Done")

	# (b) Generate noisy images with salt-and-pepper noise( probability 0.1 and 0.05)
	sp010 = salt_and_pepper(Img, Width, Height, 0.1)
	cv2.imwrite('sp010.bmp', sp010)
	sp005 = salt_and_pepper(Img, Width, Height, 0.05)
	cv2.imwrite('sp005.bmp', sp005)
	print("Salt-and-Pepper Noise on Lena Done")

	# (c) Use the 3x3, 5x5 box filter on images generated by (a)(b)
	# 3x3 box filter
	bf_3x3_gau10 = box_filter(gau10, Width, Height, 3, 3)
	cv2.imwrite('bf_3x3_gau10.bmp', bf_3x3_gau10)
	bf_3x3_gau30 = box_filter(gau30, Width, Height, 3, 3)
	cv2.imwrite('bf_3x3_gau30.bmp', bf_3x3_gau30)
	bf_3x3_sp010 = box_filter(sp010, Width, Height, 3, 3)
	cv2.imwrite('bf_3x3_sp010.bmp', bf_3x3_sp010)
	bf_3x3_sp005 = box_filter(sp005, Width, Height, 3, 3)
	cv2.imwrite('bf_3x3_sp005.bmp', bf_3x3_sp005)
	# 5x5 box filter
	bf_5x5_gau10 = box_filter(gau10, Width, Height, 5, 5)
	cv2.imwrite('bf_5x5_gau10.bmp', bf_5x5_gau10)
	bf_5x5_gau30 = box_filter(gau30, Width, Height, 5, 5)
	cv2.imwrite('bf_5x5_gau30.bmp', bf_5x5_gau30)
	bf_5x5_sp010 = box_filter(sp010, Width, Height, 5, 5)
	cv2.imwrite('bf_5x5_sp010.bmp', bf_5x5_sp010)
	bf_5x5_sp005 = box_filter(sp005, Width, Height, 5, 5)
	cv2.imwrite('bf_5x5_sp005.bmp', bf_5x5_sp005)
	print("Box Filter on Lena Done")

	# (d) Use 3x3, 5x5 median filter on images generated by (a)(b)
	# 3x3 median filter
	mf_3x3_gau10 = median_filter(gau10, Width, Height, 3, 3)
	cv2.imwrite('mf_3x3_gau10.bmp', mf_3x3_gau10)
	mf_3x3_gau30 = median_filter(gau30, Width, Height, 3, 3)
	cv2.imwrite('mf_3x3_gau30.bmp', mf_3x3_gau30)
	mf_3x3_sp010 = median_filter(sp010, Width, Height, 3, 3)
	cv2.imwrite('mf_3x3_sp010.bmp', mf_3x3_sp010)
	mf_3x3_sp005 = median_filter(sp005, Width, Height, 3, 3)
	cv2.imwrite('mf_3x3_sp005.bmp', mf_3x3_sp005)
	# 5x5 box filter
	mf_5x5_gau10 = median_filter(gau10, Width, Height, 5, 5)
	cv2.imwrite('mf_5x5_gau10.bmp', mf_5x5_gau10)
	mf_5x5_gau30 = median_filter(gau30, Width, Height, 5, 5)
	cv2.imwrite('mf_5x5_gau30.bmp', mf_5x5_gau30)
	mf_5x5_sp010 = median_filter(sp010, Width, Height, 5, 5)
	cv2.imwrite('mf_5x5_sp010.bmp', mf_5x5_sp010)
	mf_5x5_sp005 = median_filter(sp005, Width, Height, 5, 5)
	cv2.imwrite('mf_5x5_sp005.bmp', mf_5x5_sp005)
	print("Median Filter on Lena Done")

	# (e) Use both opening-then-closing and closing-then-opening filter 
	#	  (using the octogonal 3-5-5-5-3 kernel, value = 0) on images generated by (a)(b)
	# gaussian noise 10, opening-then-closing
	open_10 = Opening(gau10, oct_Kernel)
	othc_10 = Closing(open_10, oct_Kernel)
	cv2.imwrite('opening-then-closing_gau10.bmp', othc_10)
	# gaussian noise 30, opening-then-closing
	open_30 = Opening(gau30, oct_Kernel)
	othc_30 = Closing(open_30, oct_Kernel)
	cv2.imwrite('opening-then-closing_gau30.bmp', othc_30)
	# gaussian noise 10, closing-then-opening
	clos_10 = Closing(gau10, oct_Kernel)
	ctho_10 = Opening(clos_10, oct_Kernel)
	cv2.imwrite('closing-then-opening_gau10.bmp', ctho_10)
	# gaussian noise 30, closing-then-opening
	clos_30 = Closing(gau30, oct_Kernel)
	ctho_30 = Opening(clos_30, oct_Kernel)
	cv2.imwrite('closing-then-opening_gau30.bmp', ctho_30)
	# salt-and-pepper noise 0.1, opening-then-closing
	open_010 = Opening(sp010, oct_Kernel)
	othc_010 = Closing(open_010, oct_Kernel)
	cv2.imwrite('opening-then-closing_sp010.bmp', othc_010)
	# salt-and-pepper noise 0.05, opening-then-closing
	open_005 = Opening(sp005, oct_Kernel)
	othc_005 = Closing(open_005, oct_Kernel)
	cv2.imwrite('opening-then-closing_sp005.bmp', othc_005)
	# salt-and-pepper noise 0.1, closing-then-opening
	clos_010 = Closing(sp010, oct_Kernel)
	ctho_010 = Opening(clos_010, oct_Kernel)
	cv2.imwrite('closing-then-opening_sp10.bmp', ctho_010)
	# salt-and-pepper noise 0.05, closing-then-opening
	clos_005 = Closing(sp005, oct_Kernel)
	ctho_005 = Opening(clos_005, oct_Kernel)
	cv2.imwrite('closing-then-opening_sp005.bmp', ctho_005)
	print("Both Opening-then-Closing and Closing-then-Opening Filter on Lena Done")

	# SNR
	file = open("SNR.txt", "w")
	file.write('gau10: ' + str(SNR(Img_copy, gau10, Width, Height)) + '\n')
	file.write('gau30: ' + str(SNR(Img_copy, gau30, Width, Height)) + '\n')
	file.write('sp010: ' + str(SNR(Img_copy, sp010, Width, Height)) + '\n')
	file.write('sp005: ' + str(SNR(Img_copy, sp005, Width, Height)) + '\n')
	file.write('bf_3x3_gau10: ' + str(SNR(Img_copy, bf_3x3_gau10, Width, Height)) + '\n')
	file.write('bf_3x3_gau30: ' + str(SNR(Img_copy, bf_3x3_gau30, Width, Height)) + '\n')
	file.write('bf_3x3_sp010: ' + str(SNR(Img_copy, bf_3x3_sp010, Width, Height)) + '\n')
	file.write('bf_3x3_sp005: ' + str(SNR(Img_copy, bf_3x3_sp005, Width, Height)) + '\n')
	file.write('bf_5x5_gau10: ' + str(SNR(Img_copy, bf_5x5_gau10, Width, Height)) + '\n')
	file.write('bf_5x5_gau30: ' + str(SNR(Img_copy, bf_5x5_gau30, Width, Height)) + '\n')
	file.write('bf_5x5_sp010: ' + str(SNR(Img_copy, bf_5x5_sp010, Width, Height)) + '\n')
	file.write('bf_5x5_sp005: ' + str(SNR(Img_copy, bf_5x5_sp005, Width, Height)) + '\n')
	file.write('mf_3x3_gau10: ' + str(SNR(Img_copy, mf_3x3_gau10, Width, Height)) + '\n')
	file.write('mf_3x3_gau30: ' + str(SNR(Img_copy, mf_3x3_gau30, Width, Height)) + '\n')
	file.write('mf_3x3_sp010: ' + str(SNR(Img_copy, mf_3x3_sp010, Width, Height)) + '\n')
	file.write('mf_3x3_sp005: ' + str(SNR(Img_copy, mf_3x3_sp005, Width, Height)) + '\n')
	file.write('mf_5x5_gau10: ' + str(SNR(Img_copy, mf_5x5_gau10, Width, Height)) + '\n')
	file.write('mf_5x5_gau30: ' + str(SNR(Img_copy, mf_5x5_gau30, Width, Height)) + '\n')
	file.write('mf_5x5_sp010: ' + str(SNR(Img_copy, mf_5x5_sp010, Width, Height)) + '\n')
	file.write('mf_5x5_sp005: ' + str(SNR(Img_copy, mf_5x5_sp005, Width, Height)) + '\n')
	file.write('opening-then-closing_gau10: ' + str(SNR(Img_copy, othc_10, Width, Height)) + '\n')
	file.write('opening-then-closing_gau30: ' + str(SNR(Img_copy, othc_30, Width, Height)) + '\n')
	file.write('closing-then-opening_gau10: ' + str(SNR(Img_copy, ctho_10, Width, Height)) + '\n')
	file.write('closing-then-opening_gau30: ' + str(SNR(Img_copy, ctho_30, Width, Height)) + '\n')
	file.write('opening-then-closing_sp010: ' + str(SNR(Img_copy, othc_010, Width, Height)) + '\n')
	file.write('opening-then-closing_sp005: ' + str(SNR(Img_copy, othc_005, Width, Height)) + '\n')
	file.write('closing-then-opening_sp010: ' + str(SNR(Img_copy, ctho_010, Width, Height)) + '\n')
	file.write('closing-then-opening_sp005: ' + str(SNR(Img_copy, ctho_005, Width, Height)) + '\n')
	file.close()
	print("Calculate SNR Done")

	
if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument('--init_pict', type=str, default='lena.bmp')

	Config = parser.parse_args()
	main(Config)
